## You can generate a custom docker compose file automatically on http://reportportal.io/download (Step 2)

## This is example of Docker Compose for ReportPortal
## Do not forget to configure data volumes for production usage

## Execute 'docker-compose -f docker-compose-local.yml -p reportportal up -d --force-recreate' --build
## to start all containers in daemon mode
## Where:
##      '-f docker-compose-local.yml' -- specifies this compose file
##      '-p reportportal' -- specifies container's prefix (project name)
##      '-d' -- enables daemon mode
##      '--force-recreate' -- forces re-recreating of all containers
##      '--build' -- build images before starting containers.
version: '2.4'
services:

  gateway:
    image: traefik:1.7.12
    ports:
      - "8080:8080" # HTTP exposed
      - "8081:8081" # HTTP Administration exposed
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --docker
      - --docker.watch
      - --docker.constraints=tag==reportportal
      - --defaultEntryPoints=http
      - --entryPoints=Name:http Address::8080
      - --logLevel=ERROR
      - --web
      - --web.address=:8081
      - --web.metrics=true
      - --web.metrics.prometheus=true
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.3.0
    restart: always
    volumes:
      - ./tmp/data/elasticsearch:/usr/share/elasticsearch/data
    environment:
      - "bootstrap.memory_lock=true"
      - "discovery.type=single-node"
      - "logger.level=INFO"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "http://localhost:9200/_cat/health"]

  analyzer:
    image: reportportal/service-analyzer:5.0.0-BETA-4
    depends_on:
      - rabbitmq
      - elasticsearch
    restart: always


  migrations:
    image: reportportal/migrations:5.0.0-BETA-9
    restart: on-failure
    depends_on:
      - postgres
    #     condition: service_healthy
    environment:
      POSTGRES_USER: rpuser
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: rppass
      POSTGRES_SERVER: postgres
      POSTGRES_DB: reportportal


  postgres:
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: rpuser
      POSTGRES_PASSWORD: rppass
      POSTGRES_DB: reportportal
    volumes:
      - ./tmp/data/postgres:/var/lib/postgresql/data
    restart: on-failure
    # If you need to access the DB locally. Could be a security risk to expose DB.
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 120s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.7.16-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      retries: 5

  uat:
    image: reportportal/service-authorization:5.0.0-BETA-12
    #ports:
    #  - "9999:9999"
    environment:
      - RP_SESSION_LIVE=86400 #in seconds
    restart: always
    labels:
      - "traefik.backend=uat"
      - "traefik.frontend.rule=PathPrefixStrip:/uat"
      - "traefik.enable=true"
      - "traefik.port=9999"
      - "traefik.tags=reportportal"

  index:
    image: reportportal/service-index:5.0.3
    depends_on:
      - gateway
    restart: always
    environment:
      - LB_URL=http://gateway:8081
    labels:
      - "traefik.backend=index"
      - "traefik.frontend.rule=PathPrefix:/"
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.tags=reportportal"

  ui:
    image: reportportal/service-ui:5.0.0-BETA-12
    environment:
      - RP_SERVER_PORT=8080
    restart: always
    labels:
      - "traefik.backend=ui"
      - "traefik.frontend.rule=PathPrefixStrip:/ui/"
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.tags=reportportal"

  api:
    build:
      context: ..
      dockerfile: Dockerfile-debug
    volumes:
      - ./tmp/data/storage:/data/storage
      - ./tmp/plugins:/plugins
      - ./tmp/logs:/var
    ports:
      - "8585:8585"
    environment:
      - LOGGING_LEVEL_ORG_HIBERNATE_SQL=info
    #      - JAVA_OPTS=-Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp  -Dcom.sun.management.jmxremote.rmi.port=12349 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=false  -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=10.6.128.241 -Djava.security.egd=file:/dev/./urandom
    restart: always
    labels:
      - "traefik.backend=api"
      - "traefik.frontend.rule=PathPrefixStrip:/api"
      - "traefik.enable=true"
      - "traefik.port=8585"
      - "traefik.tags=reportportal"
    command: java -Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Djava.security.egd=file:/dev/./urandom -jar /home/rp-builder/build/libs/service-api.jar